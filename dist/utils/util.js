'use strict';

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function convertToStarsArray(stars) {
  var num = stars.toString().substring(0, 1);
  var array = [];
  for (var i = 1; i <= 5; i++) {
    if (i <= num) {
      array.push(1);
    } else {
      array.push(0);
    }
  }
  return array;
}

function http(url, callBack) {
  _wepy2.default.request({
    url: url,
    method: 'GET',
    header: {
      'Content-Type': 'json'
    },
    success: function success(res) {
      callBack.call(this, res.data);
    },
    fail: function fail(error) {
      console.log(error);
    }
  });
}

function convertToCastString(casts) {
  var castsjoin = '';
  for (var idx in casts) {
    castsjoin = castsjoin + casts[idx].name + ' / ';
  }
  return castsjoin.substring(0, castsjoin.length - 2);
}

function convertToCastInfos(casts) {
  var castsArray = [];
  for (var idx in casts) {
    var cast = {
      img: casts[idx].avatars ? casts[idx].avatars.large : '',
      name: casts[idx].name
    };
    castsArray.push(cast);
  }
  return castsArray;
}

module.exports = {
  convertToStarsArray: convertToStarsArray,
  http: http,
  convertToCastString: convertToCastString,
  convertToCastInfos: convertToCastInfos
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsiY29udmVydFRvU3RhcnNBcnJheSIsInN0YXJzIiwibnVtIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJhcnJheSIsImkiLCJwdXNoIiwiaHR0cCIsInVybCIsImNhbGxCYWNrIiwicmVxdWVzdCIsIm1ldGhvZCIsImhlYWRlciIsInN1Y2Nlc3MiLCJyZXMiLCJjYWxsIiwiZGF0YSIsImZhaWwiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJjb252ZXJ0VG9DYXN0U3RyaW5nIiwiY2FzdHMiLCJjYXN0c2pvaW4iLCJpZHgiLCJuYW1lIiwibGVuZ3RoIiwiY29udmVydFRvQ2FzdEluZm9zIiwiY2FzdHNBcnJheSIsImNhc3QiLCJpbWciLCJhdmF0YXJzIiwibGFyZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFFQSxTQUFTQSxtQkFBVCxDQUE2QkMsS0FBN0IsRUFBb0M7QUFDbEMsTUFBSUMsTUFBTUQsTUFBTUUsUUFBTixHQUFpQkMsU0FBakIsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBVjtBQUNBLE1BQUlDLFFBQVEsRUFBWjtBQUNBLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxLQUFLLENBQXJCLEVBQXdCQSxHQUF4QixFQUE2QjtBQUMzQixRQUFJQSxLQUFLSixHQUFULEVBQWM7QUFDWkcsWUFBTUUsSUFBTixDQUFXLENBQVg7QUFDRCxLQUZELE1BR0s7QUFDSEYsWUFBTUUsSUFBTixDQUFXLENBQVg7QUFDRDtBQUNGO0FBQ0QsU0FBT0YsS0FBUDtBQUNEOztBQUVELFNBQVNHLElBQVQsQ0FBY0MsR0FBZCxFQUFtQkMsUUFBbkIsRUFBNkI7QUFDM0IsaUJBQUtDLE9BQUwsQ0FBYTtBQUNYRixTQUFLQSxHQURNO0FBRVhHLFlBQVEsS0FGRztBQUdYQyxZQUFRO0FBQ04sc0JBQWdCO0FBRFYsS0FIRztBQU1YQyxhQUFTLGlCQUFVQyxHQUFWLEVBQWU7QUFDdEJMLGVBQVNNLElBQVQsQ0FBYyxJQUFkLEVBQW9CRCxJQUFJRSxJQUF4QjtBQUNELEtBUlU7QUFTWEMsVUFBTSxjQUFVQyxLQUFWLEVBQWlCO0FBQ3JCQyxjQUFRQyxHQUFSLENBQVlGLEtBQVo7QUFDRDtBQVhVLEdBQWI7QUFhRDs7QUFFRCxTQUFTRyxtQkFBVCxDQUE2QkMsS0FBN0IsRUFBb0M7QUFDbEMsTUFBSUMsWUFBWSxFQUFoQjtBQUNBLE9BQUssSUFBSUMsR0FBVCxJQUFnQkYsS0FBaEIsRUFBdUI7QUFDckJDLGdCQUFZQSxZQUFZRCxNQUFNRSxHQUFOLEVBQVdDLElBQXZCLEdBQThCLEtBQTFDO0FBQ0Q7QUFDRCxTQUFPRixVQUFVcEIsU0FBVixDQUFvQixDQUFwQixFQUF1Qm9CLFVBQVVHLE1BQVYsR0FBbUIsQ0FBMUMsQ0FBUDtBQUNEOztBQUVELFNBQVNDLGtCQUFULENBQTRCTCxLQUE1QixFQUFtQztBQUNqQyxNQUFJTSxhQUFhLEVBQWpCO0FBQ0EsT0FBSyxJQUFJSixHQUFULElBQWdCRixLQUFoQixFQUF1QjtBQUNyQixRQUFJTyxPQUFPO0FBQ1RDLFdBQUtSLE1BQU1FLEdBQU4sRUFBV08sT0FBWCxHQUFxQlQsTUFBTUUsR0FBTixFQUFXTyxPQUFYLENBQW1CQyxLQUF4QyxHQUFnRCxFQUQ1QztBQUVUUCxZQUFNSCxNQUFNRSxHQUFOLEVBQVdDO0FBRlIsS0FBWDtBQUlBRyxlQUFXdEIsSUFBWCxDQUFnQnVCLElBQWhCO0FBQ0Q7QUFDRCxTQUFPRCxVQUFQO0FBQ0Q7O0FBRURLLE9BQU9DLE9BQVAsR0FBaUI7QUFDZm5DLHVCQUFxQkEsbUJBRE47QUFFZlEsUUFBTUEsSUFGUztBQUdmYyx1QkFBcUJBLG1CQUhOO0FBSWZNLHNCQUFvQkE7QUFKTCxDQUFqQiIsImZpbGUiOiJ1dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdlcHkgZnJvbSAnd2VweSdcblxuZnVuY3Rpb24gY29udmVydFRvU3RhcnNBcnJheShzdGFycykge1xuICB2YXIgbnVtID0gc3RhcnMudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMSlcbiAgdmFyIGFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gNTsgaSsrKSB7XG4gICAgaWYgKGkgPD0gbnVtKSB7XG4gICAgICBhcnJheS5wdXNoKDEpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYXJyYXkucHVzaCgwKVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXlcbn1cblxuZnVuY3Rpb24gaHR0cCh1cmwsIGNhbGxCYWNrKSB7XG4gIHdlcHkucmVxdWVzdCh7XG4gICAgdXJsOiB1cmwsXG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBoZWFkZXI6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnanNvbidcbiAgICB9LFxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIGNhbGxCYWNrLmNhbGwodGhpcywgcmVzLmRhdGEpXG4gICAgfSxcbiAgICBmYWlsOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gY29udmVydFRvQ2FzdFN0cmluZyhjYXN0cykge1xuICB2YXIgY2FzdHNqb2luID0gJydcbiAgZm9yICh2YXIgaWR4IGluIGNhc3RzKSB7XG4gICAgY2FzdHNqb2luID0gY2FzdHNqb2luICsgY2FzdHNbaWR4XS5uYW1lICsgJyAvICdcbiAgfVxuICByZXR1cm4gY2FzdHNqb2luLnN1YnN0cmluZygwLCBjYXN0c2pvaW4ubGVuZ3RoIC0gMilcbn1cblxuZnVuY3Rpb24gY29udmVydFRvQ2FzdEluZm9zKGNhc3RzKSB7XG4gIHZhciBjYXN0c0FycmF5ID0gW11cbiAgZm9yICh2YXIgaWR4IGluIGNhc3RzKSB7XG4gICAgdmFyIGNhc3QgPSB7XG4gICAgICBpbWc6IGNhc3RzW2lkeF0uYXZhdGFycyA/IGNhc3RzW2lkeF0uYXZhdGFycy5sYXJnZSA6ICcnLFxuICAgICAgbmFtZTogY2FzdHNbaWR4XS5uYW1lXG4gICAgfVxuICAgIGNhc3RzQXJyYXkucHVzaChjYXN0KVxuICB9XG4gIHJldHVybiBjYXN0c0FycmF5XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb252ZXJ0VG9TdGFyc0FycmF5OiBjb252ZXJ0VG9TdGFyc0FycmF5LFxuICBodHRwOiBodHRwLFxuICBjb252ZXJ0VG9DYXN0U3RyaW5nOiBjb252ZXJ0VG9DYXN0U3RyaW5nLFxuICBjb252ZXJ0VG9DYXN0SW5mb3M6IGNvbnZlcnRUb0Nhc3RJbmZvc1xufVxuIl19